 ListNode* reverseList(ListNode* head) 
{
        // If the list is empty or has only one node, return head as it is already reversed
        if (head == nullptr || head->next == nullptr) 
        {
            return head;
        }
        
        ListNode* current = head;
        ListNode* previous = nullptr;
        
        // Traverse the list and reverse pointers
        while (current != nullptr) 
        {
            // Swap next and prev pointers

            ListNode* nextNode = current->next;
            current->next = previous;
            current->prev = nextNode;
            
            // Move pointers one step forward
            previous = current;
            current = nextNode;
        }


        // 'previous' now points to the new head of the reversed list
        return previous;
    }
