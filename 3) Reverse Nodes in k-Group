/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
            
            if(head==NULL) return NULL;

            int available=k;
            int cnt=0;

            ListNode* temp=head;

            while(temp!=NULL and available>0)
            {
                temp=temp->next;
                available--;
            }

         if(available==0)
         {
             ListNode* prevptr=NULL;
             ListNode* currptr=head;
             ListNode* nextptr;
  
             while(currptr!=NULL and cnt<k)
             {
                 nextptr=currptr->next;
                 currptr->next=prevptr;

                 prevptr=currptr;
                 currptr=nextptr;

                 cnt++;
             }


             if(nextptr!=NULL)
             {
                 head->next=reverseKGroup(nextptr,k);
             }


             return prevptr;


         }


       return head;


    }
};
