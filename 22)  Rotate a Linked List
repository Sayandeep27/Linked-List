
ListNode* rotateRight(ListNode* head, int k) {
   
if (!head || k == 0) return head;

    // Find the length of the linked list
    ListNode* temp = head;

    int length = 1;

    while (temp->next) 
    {
        temp = temp->next;
        length++;
    }

    // Connect the last node to the head to make it circular
    temp->next = head;

    // Find the new tail and the new head

    k = k % length; // Effective rotation

    int stepsToNewHead = length - k;

    ListNode* newTail = head;

    for (int i = 1; i < stepsToNewHead; i++) 
    {
        newTail = newTail->next;
    }

    ListNode* newHead = newTail->next;

    newTail->next = nullptr; // Break the circular link

    return newHead;
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
         
         ListNode* temp=head;

         if(head==NULL) return NULL;

         int len=0;

         while(temp!=NULL)
         {
             temp=temp->next;
             len++;
         }

         if(len==1) return head;        

         temp=head;

         k=k%len;  // just if k is greater than the len of list

         int dest=len-k-1;

         if(k==0) return head;
        
        int cnt=0;

        while(cnt<dest)
        {
            temp=temp->next;
            cnt++;
        }

        ListNode* lmao=temp;


        temp=temp->next;

        ListNode* ans=temp;

        lmao->next=NULL;

        while(temp->next!=NULL)
        {
            temp=temp->next;
        }

        temp->next=head;

        

        return ans;


    }
};
