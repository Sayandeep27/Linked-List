/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
         
          if(head==NULL) return NULL;  // Check if the list is initially empty

          int len=0;    // Variable to store the length of the linked list

          ListNode* temp=head;     // Temporary pointer to traverse the list


          // Calculate the length of the linked list
          while(temp!=NULL)
          {
              temp=temp->next;
              len++;
          }

          int target=len-n;   // Calculate the position of the node to be removed from the start


          // If the node to be removed is the first node
          if(target==0)
          {
              head=head->next;  // Move head to the next node
              return head;
          }


          // Recursively remove the nth node from the end
          head->next=removeNthFromEnd(head->next,n);

          return head;

    }
};
