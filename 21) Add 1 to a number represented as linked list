// Function to reverse a linked list
ListNode* reverseList(ListNode* head) 
{
    ListNode* prev = nullptr;
    ListNode* curr = head;

    while (curr != nullptr) 
    {
        ListNode* nextTemp = curr->next;
        curr->next = prev;
        prev = curr;
        curr = nextTemp;
    }

    return prev;
}



// Function to add 1 to a number represented by a linked list
ListNode* addOne(ListNode* head) 
{
    // Reverse the linked list
    head = reverseList(head);
    
    ListNode* current = head;
    ListNode* prev = nullptr;

    int carry = 1; // Initial carry is 1 because we are adding 1
    
    while (current != nullptr) 
    {
        int sum = current->val + carry;
        carry = sum / 10;
        current->val = sum % 10;
        prev = current;
        current = current->next;
    }


    // If there is still a carry left, add a new node at the end
    if (carry > 0) 
    {
        prev->next = new ListNode(carry);
    }



    // Reverse the list back to original order
    head = reverseList(head);
    
    return head;
}
