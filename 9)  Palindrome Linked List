/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverse(ListNode* ptr)
    {
        ListNode* pre=NULL;
        ListNode* nxt=NULL;

        while(ptr!=NULL)
        {
            nxt=ptr->next;
            ptr->next=pre;

            pre=ptr;
            ptr=nxt;
        }


        return pre;

    } 
 

    bool isPalindrome(ListNode* head) {
        
       if(head==NULL or head->next==NULL) return true;

       ListNode* slow=head;
       ListNode* fast=head;

       while(fast->next!=NULL and fast->next->next!=NULL)
       {
           slow=slow->next;
           fast=fast->next->next;
       }

       slow->next=reverse(slow->next);

       slow=slow->next;

       ListNode* temp=head;

       while(slow!=NULL)
       {
           if(temp->val!=slow->val) return false;


           temp=temp->next;
           slow=slow->next;
       }
      
      return true;

    }
};
